from datetime import datetime

from flask_login import UserMixin
from werkzeug.security import check_password_hash, generate_password_hash

from app import db


class User(UserMixin, db.Model):
    """User model for storing user account data"""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False, index=True)
    password_hash = db.Column(db.String(256), nullable=False)
    name = db.Column(db.String(100), nullable=True)
    state = db.Column(db.String(100), nullable=True)
    city = db.Column(db.String(100), nullable=True)
    pincode = db.Column(db.String(10), nullable=True)
    mobile = db.Column(db.String(15), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    activities = db.relationship('Activity', backref='user', lazy='dynamic')
    reports = db.relationship('Report', backref='user', lazy='dynamic')
    footprints = db.relationship('CarbonFootprint', backref='user', lazy='dynamic')
    
    def set_password(self, password):
        """Set user password"""
        self.password_hash = generate_password_hash(password)
        
    def check_password(self, password):
        """Check password against stored hash"""
        return check_password_hash(self.password_hash, password)
    
    def __repr__(self):
        return f'<User {self.username}>'


class EmissionCategory(db.Model):
    """Categories of emissions (e.g., Transportation, Home Energy, Food)"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    
    # Relationships
    emission_factors = db.relationship('EmissionFactor', backref='category', lazy='dynamic')
    
    def __repr__(self):
        return f'<EmissionCategory {self.name}>'


class EmissionFactor(db.Model):
    """Emission factors for calculating carbon footprints"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    value = db.Column(db.Float, nullable=False)
    unit = db.Column(db.String(50), nullable=False)
    description = db.Column(db.Text)
    
    # Foreign keys
    category_id = db.Column(db.Integer, db.ForeignKey('emission_category.id'), nullable=False)
    
    # Relationships
    activities = db.relationship('Activity', backref='emission_factor', lazy='dynamic')
    
    def __repr__(self):
        return f'<EmissionFactor {self.name}: {self.value} {self.unit}>'


class Activity(db.Model):
    """User activities that generate carbon emissions"""
    id = db.Column(db.Integer, primary_key=True)
    activity_type = db.Column(db.String(100), nullable=False)
    duration = db.Column(db.Float)  # In appropriate units (hours, miles, etc.)
    emission_amount = db.Column(db.Float, default=0)  # Calculated CO2 equivalent
    date = db.Column(db.DateTime, default=datetime.utcnow)
    quantity = db.Column(db.Float, default=1)  # Amount of the activity (e.g., miles driven)
    
    # Foreign keys
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    emission_factor_id = db.Column(db.Integer, db.ForeignKey('emission_factor.id'), nullable=False)
    report_id = db.Column(db.Integer, db.ForeignKey('report.id'), nullable=True)
    
    def __repr__(self):
        return f'<Activity {self.activity_type}: {self.emission_amount} kg CO2e>'


class Report(db.Model):
    """Carbon footprint reports generated by users"""
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), default="Carbon Footprint Report")
    total_emissions = db.Column(db.Float, default=0)
    date_generated = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Foreign keys
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    
    # Relationships
    activities = db.relationship('Activity', backref='report', lazy='dynamic')
    
    def __repr__(self):
        return f'<Report {self.id}: {self.total_emissions} kg CO2e>'


class CarbonFootprint(db.Model):
    """Carbon footprint calculation model adapted for Indian users"""
    id = db.Column(db.Integer, primary_key=True)
    
    # User relationship
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    
    # Transportation (using kilometers for Indian context)
    car_kilometers = db.Column(db.Float, default=0)
    car_efficiency = db.Column(db.Float, default=0)  # km per liter
    two_wheeler_kilometers = db.Column(db.Float, default=0)
    two_wheeler_efficiency = db.Column(db.Float, default=0)  # km per liter
    public_transit_kilometers = db.Column(db.Float, default=0)
    auto_rickshaw_kilometers = db.Column(db.Float, default=0)
    flights_domestic = db.Column(db.Integer, default=0)  # < 2000 km
    flights_international = db.Column(db.Integer, default=0) # > 2000 km
    
    # Home energy (adapted for Indian usage patterns)
    electricity_kwh = db.Column(db.Float, default=0)
    lpg_cylinders = db.Column(db.Float, default=0)  # Number of cylinders
    
    # Food & consumption (with Indian diet types)
    diet_type = db.Column(db.String(50), default="vegetarian")  # More common in India
    
    # Results
    transportation_footprint = db.Column(db.Float, default=0)
    home_energy_footprint = db.Column(db.Float, default=0)
    food_footprint = db.Column(db.Float, default=0)
    total_footprint = db.Column(db.Float, default=0)
    
    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    title = db.Column(db.String(100), default="My Carbon Footprint")
    
    def __repr__(self):
        return f'<CarbonFootprint {self.id}: {self.total_footprint} kg CO2e>'
